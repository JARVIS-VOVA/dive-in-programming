require 'matrix'

m = Matrix[[1,2,3],
          [4,5,6],
          [7,8,9]]

=begin
  Вместо этого можно вызвать метод rows, передав ему массив массивов (в таком случае «дополнительные» скобки необходимы).
  Необязательный параметр сору, по умолчанию равный true, указывает, надо ли скопировать переданные массивы или просто сохранить на них ссылки.
  Оставляйте значение true, если нужно защитить исходные массивы от изменения, и задавайте false, если это несущественно.
=end

row1 = [2,3]
row2 = [4,5]
m1 = Matrix.rows([row1,row2])       # copy=true
m2 = Matrix.rows([row1,row2],false) # He копировать.
row1[1] = 99                        # Теперь изменим row1.

p m1                                # Matrix[[2, 3], [4, 5]]
p m2                                # Matrix[[2, 99], [4, 5]]


m1 = Matrix.rows([[1,2],[3,4]])
m2 = Matrix.columns([[5,6],[7,8]])

p m1 # Matrix[[1, 2], [3, 4]]
p m2 # Matrix[[5, 7], [6, 8]]

=begin
  Предполагается, что все матрицы прямоугольные, но это не проверяется.
  Если вы создадите матрицу, в которой отдельные строки или столбцы длиннее либо короче остальных,
  то можете получить неверные или неожиданные результаты.
=end

im1 = Matrix.identity(3) # Matrix[[1,0,0],[0,1,0],[0,0,1]]
im2 = Matrix.I(3)        # То же самое.
im3 = Matrix.unit(3)     # То же самое.

# Более общий метод scalar строит диагональную матрицу, в которой все элементы на диагонали одинаковы, но не обязательно равны 1

p sm = Matrix.scalar(3,8) # Matrix[[8,0,0],[0,8,0],[0,0,8]]

# Еще более общим является метод diagonal, который формирует диагональную матрицу с произвольными элементами (ясно, что параметр, задающий размерность, в этом случае не нужен).

p dm = Matrix.diagonal(2,3,7) # Matrix[[2,0,0],[0,3,0],[0,0,7]]

# Метод zero создает нулевую матрицу заданной размерности (все элементы равны 0):

p zm = Matrix.zero(3) # Matrix[[0,0,0],[0,0,0],[0,0,0]]

# Понятно, что методы identity, scalar, diagonal и zero создают квадратные матрицы.

# Чтобы создать матрицу размерности 1?N или N?1, воспользуйтесь методом row_vector или column_vector соответственно.

p а = Matrix.row_vector([2,4,6,8])    # Matrix[[2,4,6,8]]
p b = Matrix.column_vector([6,7,8,9]) # Matrix[[6],[7],[8],[9]]

# К отдельным элементам матрицы можно обращаться, указывая индексы в квадратных скобках (оба индекса заключаются в одну пару скобок). Отметим, что не существует метода []=
# По той же причине, по которой его нет в классе Fixnum: матрицы — неизменяемые объекты (такое решение было принято автором библиотеки).

m = Matrix[[1,2,3],[4,5,6]]
p m[1,2] # 6

=begin
  Иногда необходимо узнать размерность или форму матрицы. Для этого есть разные методы, например row_size и column_size
  Метод row_size возвращает число строк в матрице.
  Что касается метода column_size, тут есть одна тонкость: он проверяет лишь размер первой строки.
  Если по каким-либо причинам матрица не прямоугольная, то полученное значение бессмысленно.
  Кроме того, поскольку метод square? (проверяющий, является ли матрица квадратной) обращается к row_size и column_size,
  его результат тоже нельзя считать стопроцентно надежным.
=end

p m1 = Matrix[[1,2,3],[4,5,6],[7,8,9]]
p m1.column_size # 3
p m1.row_size    # 3
p m1.square?     # true  
