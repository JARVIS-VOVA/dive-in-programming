# Чтобы удалить элемент с известным индексом, достаточно вызвать метод delete_at

a = [10, 12, 14, 16, 18]
p a.delete_at(3) # Возвращает 16.
p a # [10, 12, 14, 18]
p a.delete_at(9) # Возвращает nil {вне диапазона).
p a # [10, 12, 14, 18]

# Все элементы с заданным значением поможет удалить метод delete.
# Он возвращает значения удаленных элементов или nil, если искомый элемент не найден

p b = %w(spam spam bacon spam eggs ham spam)
p b.delete("spam") # Возвращает "spam"
p b # b равно ["bacon", "eggs", "ham"]
p b.delete("caviar") # Возвращает nil

# ----------

# Метод delete принимает также блок.
# Это не вполне согласуется с интуицией; если объект не найден, происходит вычисление блока
# (при этом могут выполняться разнообразные операции) и возвращается вычисленное значение.

p с = ["alpha", "beta", "gamma", "delta"]
p с.delete("delta") { "Nonexistent" }
# Возвращается "delta" (блок не вычисляется).
p с.delete("omega") { "Nonexistent" }
# Возвращается "Nonexistent".

# ----------

# Метод delete_if передает каждый элемент массива в блок и удаляет те элементы, для которых вычисление блока дает true.
# Примерно так же ведет себя метод reject! с тем отличием, что последний может возвращать nil, когда массив не изменяется.

email = ["job offers", "greetings", "spam", "news items"]
# Удалить слова из четырех букв
email.delete_if {|x| x.length==4 }
p email # email равно ["job offers", "greetings", "news items"]

# ----------

# Метод slice! получает доступ к тем же элементам, что и slice, но, помимо возврата их значений, еще и удаляет из массива

x = [0, 2, 4, 6, 8, 10, 12, 14, 16]
p а = x.slice!(2)    # 4
# x is now [0, 2, 6, 8, 10, 12, 14, 16]
p b = x.slice!(2,3)  # [6, 8, 10]
# x is now [0, 2, 12, 14, 16]
p с = x.slice!(2..3) # [12, 14]
p x # x is now [0, 2, 16]

# Для удаления элементов из массива можно также пользоваться методами shift и pop
# (дополнительную информацию об их исходном предназначении вы найдете в разделе 9.2).

x = [1, 2, 3, 4, 5]
x.pop   # Удалить последний элемент.
p x # x is now [1, 2, 3, 4]

x.shift # Удалить первый элемент.
p x # x is now [2, 3, 4]

# ----------

# Метод reject принимает блок и формирует новый массив без тех элементов, для которых блок возвращает true

arr = [1,2,3,4,5,6,7,8]
p odd = arr.reject {|x| x % 2 == 0 } # [1,3,5,7]

# Наконец, метод clear удаляет из массива все элементы. Это эквивалентно присваиванию переменной пустого массива, но чуть-чуть эффективнее:

x = [1, 2, 3]
p x.clear
# x равно []
