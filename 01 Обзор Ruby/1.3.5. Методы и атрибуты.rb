# Методы могут принимать переменное число аргументов:
def mymethod(a, b, *с)
 print a, b
 с.each do |x| print x end
end

mymethod(1,2,3,4,5,6,7) # a=1, b=2, c=[3,4,5,6,7]

p '#'
p '#'
p '#'

=begin
  Именованные параметры позво­
  .1яют, с одной стороны, задавать :шачения по умолчанию, а, с другой, перечис­
  .1ять аргументы в произвольном порядке, потому что они снабжены явными
  :-.1етками:
=end

def mymethod_2 (name: "default", options: {})
  # ...
end

p '#'
p '#'
p '#'

=begin
  Если подразумеваемое по умолчанию значение именованного параметра в опре­
  делении метода опущено, считается, что такой именованный параметр обязателен:
=end

def other_method(name:, age:)
  puts "Возраст человека #{name} составляет #{age} лет."
  # Попытка вызвать этот метод, не указав значения
  # name и age, будет считаться ошибкой.
end

p '#'
p '#'
p '#'

# синглетного метода для строкового объекта:

str = "Hello, world!"
str2 = "Goodbye!"

def str.spell
  self.split(//).join("-")
end

p str.spell # "Н-е-1-1-о-,- -w-o-r-1-d-!"
p str2.spell # ошибка!
